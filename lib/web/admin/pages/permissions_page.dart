import 'package:flutter/material.dart';

class PermissionsPage extends StatefulWidget {
  const PermissionsPage({Key? key}) : super(key: key);

  @override
  State<PermissionsPage> createState() => _PermissionsPageState();
}

class _PermissionsPageState extends State<PermissionsPage> {
  String? selectedUser;
  String? selectedRole;
  bool showTreeView = false;

  final List<Map<String, dynamic>> users = [
    {'id': 1, 'name': 'Nguy·ªÖn VƒÉn A', 'email': 'nguyenvana@tlu.edu.vn', 'currentRole': 'Admin'},
    {'id': 2, 'name': 'Tr·∫ßn Th·ªã B', 'email': 'tranthib@tlu.edu.vn', 'currentRole': 'Gi·∫£ng vi√™n'},
    {'id': 3, 'name': 'L√™ VƒÉn C', 'email': 'levanc@tlu.edu.vn', 'currentRole': 'Ph√≤ng ƒë√†o t·∫°o'},
    {'id': 4, 'name': 'Ph·∫°m Th·ªã D', 'email': 'phamthid@tlu.edu.vn', 'currentRole': 'Gi·∫£ng vi√™n'},
    {'id': 5, 'name': 'Ho√†ng VƒÉn E', 'email': 'hoangvane@tlu.edu.vn', 'currentRole': 'Gi√°m s√°t'},
  ];

  final List<String> roles = [
    'Admin',
    'Gi·∫£ng vi√™n',
    'Ph√≤ng ƒë√†o t·∫°o',
    'Qu·∫£n l√Ω khoa',
    'Gi√°m s√°t',
  ];

  final Map<String, List<String>> rolePermissions = {
    'Admin': [
      'Qu·∫£n l√Ω ng∆∞·ªùi d√πng',
      'Ph√¢n quy·ªÅn h·ªá th·ªëng',
      'C·∫•u h√¨nh h·ªá th·ªëng',
      'Xem th·ªëng k√™',
      'Backup d·ªØ li·ªáu',
      'Qu·∫£n l√Ω log',
    ],
    'Gi·∫£ng vi√™n': [
      'Xem danh s√°ch sinh vi√™n',
      'ƒêi·ªÉm danh',
      'Xem b√°o c√°o l·ªõp',
      'C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n',
    ],
    'Ph√≤ng ƒë√†o t·∫°o': [
      'Qu·∫£n l√Ω ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o',
      'Xem v√† ph√™ duy·ªát l·ªãch h·ªçc',
      'Qu·∫£n l√Ω ƒëi·ªÉm v√† k·∫øt qu·∫£ h·ªçc t·∫≠p',
      'Th·ªëng k√™ v√† b√°o c√°o to√†n tr∆∞·ªùng',
    ],
    'Qu·∫£n l√Ω khoa': [
      'Qu·∫£n l√Ω gi·∫£ng vi√™n khoa',
      'Xem th·ªëng k√™ khoa',
      'Qu·∫£n l√Ω l·ªõp h·ªçc',
      'Ph√™ duy·ªát ƒë∆°n t·ª´',
    ],
    'Gi√°m s√°t': [
      'Theo d√µi ho·∫°t ƒë·ªông gi·∫£ng d·∫°y',
      'Gi√°m s√°t ƒëi·ªÉm danh',
      'ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng l·ªõp h·ªçc',
      'B√°o c√°o vi ph·∫°m ho·∫∑c s·ª± c·ªë',
    ],
  };

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.black87,
              ),
            ),
            const SizedBox(height: 24),

            // Khu v·ª±c ch·ªçn ng∆∞·ªùi d√πng v√† vai tr√≤
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('C·∫•u h√¨nh quy·ªÅn cho ng∆∞·ªùi d√πng',
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: DropdownButtonFormField<String>(
                            decoration: const InputDecoration(
                              labelText: 'Ch·ªçn ng∆∞·ªùi d√πng',
                              border: OutlineInputBorder(),
                            ),
                            value: selectedUser,
                            items: users.map((user) {
                              return DropdownMenuItem<String>(
                                value: user['id'].toString(),
                                child: Text('${user['name']} (${user['currentRole']})'),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setState(() {
                                selectedUser = value;
                                selectedRole = null;
                              });
                            },
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: DropdownButtonFormField<String>(
                            decoration: const InputDecoration(
                              labelText: 'Ch·ªçn vai tr√≤ m·ªõi',
                              border: OutlineInputBorder(),
                            ),
                            value: selectedRole,
                            items: roles.map((role) {
                              return DropdownMenuItem<String>(
                                value: role,
                                child: Text(role),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setState(() {
                                selectedRole = value;
                              });
                            },
                          ),
                        ),
                        const SizedBox(width: 16),
                        ElevatedButton.icon(
                          onPressed: selectedUser != null && selectedRole != null
                              ? _savePermission
                              : null,
                          icon: const Icon(Icons.save),
                          label: const Text('L∆∞u'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF0D47A1),
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),

            // Ch·ªçn ch·∫ø ƒë·ªô xem
            Row(
              children: [
                const Text('Xem quy·ªÅn theo:', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
                const SizedBox(width: 16),
                ChoiceChip(
                  label: const Text('B·∫£ng'),
                  selected: !showTreeView,
                  onSelected: (selected) => setState(() => showTreeView = false),
                ),
                const SizedBox(width: 8),
                ChoiceChip(
                  label: const Text('S∆° ƒë·ªì c√¢y'),
                  selected: showTreeView,
                  onSelected: (selected) => setState(() => showTreeView = true),
                ),
              ],
            ),
            const SizedBox(height: 16),

            // Hi·ªÉn th·ªã b·∫£ng ho·∫∑c c√¢y
            Expanded(
              child: LayoutBuilder(
                builder: (context, constraints) {
                  if (constraints.maxWidth < 600) {
                    return _buildTreeView();
                  } else {
                    return showTreeView ? _buildTreeView() : _buildUserTableView();
                  }
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  // üîπ B·∫¢NG PH√ÇN QUY·ªÄN THEO NG∆Ø·ªúI D√ôNG
  Widget _buildUserTableView() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Danh s√°ch ng∆∞·ªùi d√πng v√† quy·ªÅn',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: SizedBox(
                  width: double.infinity,
                  child: DataTable(
                    columnSpacing: 30,
                    headingRowHeight: 56,
                    dataRowHeight: 72,
                    columns: const [
                      DataColumn(label: Text('H·ªç t√™n', style: TextStyle(fontWeight: FontWeight.bold))),
                      DataColumn(label: Text('Email', style: TextStyle(fontWeight: FontWeight.bold))),
                      DataColumn(label: Text('Vai tr√≤', style: TextStyle(fontWeight: FontWeight.bold))),
                      DataColumn(label: Text('Quy·ªÅn', style: TextStyle(fontWeight: FontWeight.bold))),
                    ],
                    rows: users.map((user) {
                      final role = user['currentRole'];
                      final permissions = rolePermissions[role] ?? ['(Ch∆∞a c√≥ quy·ªÅn)'];
                      return DataRow(
                        cells: [
                          DataCell(Text(user['name'])),
                          DataCell(Text(user['email'])),
                          DataCell(
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                              decoration: BoxDecoration(
                                color: _getRoleColor(role).withOpacity(0.1),
                                borderRadius: BorderRadius.circular(12),
                                border: Border.all(color: _getRoleColor(role)),
                              ),
                              child: Text(role, style: TextStyle(color: _getRoleColor(role))),
                            ),
                          ),
                          DataCell(
                            SizedBox(
                              height: 80, // üëà c·ªë ƒë·ªãnh chi·ªÅu cao
                              child: SingleChildScrollView(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: permissions.map((p) => Text("‚Ä¢ $p")).toList(),
                                ),
                              ),
                            ),
                          ),
                        ],
                      );
                    }).toList(),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // üîπ S∆° ƒë·ªì c√¢y quy·ªÅn
  Widget _buildTreeView() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('S∆° ƒë·ªì ph√¢n quy·ªÅn d·∫°ng c√¢y', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  children: rolePermissions.entries.map((entry) {
                    return _buildRoleTree(entry.key, entry.value);
                  }).toList(),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRoleTree(String role, List<String> permissions) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ExpansionTile(
        leading: Icon(Icons.admin_panel_settings, color: _getRoleColor(role)),
        title: Text(role,
            style: TextStyle(fontWeight: FontWeight.bold, color: _getRoleColor(role), fontSize: 16)),
        children: permissions
            .map((permission) => ListTile(
          leading: const Icon(Icons.check_circle, color: Colors.green, size: 20),
          title: Text(permission),
          dense: true,
        ))
            .toList(),
      ),
    );
  }

  Color _getRoleColor(String role) {
    switch (role) {
      case 'Admin':
        return Colors.purple;
      case 'Gi·∫£ng vi√™n':
        return Colors.blue;
      case 'Ph√≤ng ƒë√†o t·∫°o':
        return Colors.green;
      case 'Qu·∫£n l√Ω khoa':
        return Colors.orange;
      case 'Gi√°m s√°t':
        return Colors.teal;
      default:
        return Colors.grey;
    }
  }

  void _savePermission() {
    if (selectedUser != null && selectedRole != null) {
      final user = users.firstWhere((u) => u['id'].toString() == selectedUser);
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('X√°c nh·∫≠n thay ƒë·ªïi quy·ªÅn'),
          content: Text(
            'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thay ƒë·ªïi vai tr√≤ c·ªßa ${user['name']} t·ª´ ${user['currentRole']} th√†nh $selectedRole?',
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('H·ªßy')),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  user['currentRole'] = selectedRole;
                });
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('ƒê√£ c·∫≠p nh·∫≠t vai tr√≤ cho ${user['name']} th√†nh $selectedRole')),
                );
                selectedUser = null;
                selectedRole = null;
              },
              child: const Text('X√°c nh·∫≠n'),
            ),
          ],
        ),
      );
    }
  }
}
